{"version":3,"sources":["services/persons.js","App.js","index.js"],"names":["baseURL","exports","getAll","axios","get","then","rsp","data","create","name","number","post","delete","id","patch","changes","isNotExistingError","e","response","status","Filter","filter","setFilter","value","onChange","target","PersonForm","persons","refreshPersons","notify","useState","newName","setNewName","newNumber","setNewNumber","inputRef","React","createRef","onSubmit","preventDefault","current","focus","reset","trimmed","trim","existing","find","p","window","confirm","personService","ref","autoFocus","type","Persons","filteredPersons","toLowerCase","includes","map","key","onClick","person","catch","msg","Notification","isError","style","color","className","App","setPersons","notification","setNotification","notificationIsError","setNotificationIsError","notificationTimeout","setNotificationTimeout","useEffect","clearTimeout","setTimeout","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.67418ed3.chunk.js","sourcesContent":["import axios from 'axios';\n\nconst baseURL = '/api/persons';\n\nconst getAll = () => axios.get(baseURL)\n    .then(rsp => rsp.data);\n\nconst create = (name, number) =>\n    axios.post(baseURL, {\n        name, number\n    }).then(rsp => rsp.data);\n\nconst delete_ = id =>\n    axios.delete(`${baseURL}/${id}`);\n\nconst isNotExistingError = e => e.response && e.response.status === 404;\n\nconst patch = (id, changes) => axios\n    .patch(`${baseURL}/${id}`, changes)\n    .then(rsp => rsp.data);\n\nconst exports = {\n    getAll, create, delete: delete_, patch, isNotExistingError,\n};\nexport default exports;","import React, { useEffect, useState } from 'react';\nimport personService from './services/persons';\n\nconst Filter = ({ filter, setFilter }) =>\n    <div>\n        filter shown with <input value={filter} onChange={(e) => setFilter(e.target.value)} />\n    </div>\n\nconst PersonForm = ({ persons, refreshPersons, notify }) => {\n    const [newName, setNewName] = useState('');\n    const [newNumber, setNewNumber] = useState('');\n    const inputRef = React.createRef();\n\n    const submit = (e) => {\n        e.preventDefault();\n        inputRef.current.focus();\n\n        const reset = () => {\n            setNewName('');\n            setNewNumber('');\n            refreshPersons();\n        }\n\n        const trimmed = newName.trim();\n        if (trimmed === '') {\n            return;\n        }\n        const existing = persons.find(p => p.name === trimmed);\n        if (existing) {\n            if (!window.confirm(`${existing.name} is already added to ` +\n                `phonebook, replace old number with a new one?`)) {\n                return;\n            }\n            personService\n                .patch(existing.id, { number: newNumber.trim() })\n                .then(() => notify(`Number updated for '${existing.name}'.`))\n                .then(reset);\n            return;\n        }\n\n        personService\n            .create(trimmed, newNumber.trim())\n            .then(() => notify(`Added '${trimmed}'.`))\n            .then(reset);\n    };\n\n    return (\n        <form onSubmit={submit}>\n            <div>\n                name: <input ref={inputRef} autoFocus={true} value={newName} onChange={(e) => setNewName(e.target.value)} />\n            </div>\n            <div>\n                number: <input value={newNumber} onChange={(e) => setNewNumber(e.target.value)} />\n            </div>\n            <div>\n                <button type=\"submit\">add</button>\n            </div>\n        </form>\n    )\n}\n\nconst Persons = ({ persons, filter, refreshPersons, notify }) => {\n    const filteredPersons = persons.filter(p =>\n        p.name.toLowerCase().includes(filter.trim().toLowerCase())\n    )\n    const drop = person => {\n        if (!window.confirm(`Delete ${person.name}?`)) {\n            return;\n        }\n        personService\n            .delete(person.id)\n            .then(() => notify(`'${person.name}' deleted.`))\n            .catch(e => {\n                const msg = personService.isNotExistingError(e) ?\n                    `'${person.name}' doesn't exist.` :\n                    `Uh oh: ${e}`;\n                notify(msg, true);\n            })\n            .then(refreshPersons);\n    };\n    return (\n        <table>\n            <thead>\n                <tr>\n                    <td>Name</td>\n                    <td>Number</td>\n                    <td>Delete</td>\n                </tr>\n            </thead>\n            <tbody>\n                {filteredPersons.map(p =>\n                    <tr key={p.id}>\n                        <td>{p.name}</td>\n                        <td>{p.number}</td>\n                        <td>\n                            <button\n                                onClick={() => drop(p)}>\n                                do it\n                            </button>\n                        </td>\n                    </tr>\n                )}\n            </tbody>\n        </table>\n    )\n}\n\nconst Notification = ({ msg, isError }) => {\n    if (!msg) {\n        return null;\n    }\n\n    const style = {\n        color: isError ? \"red\" : \"green\",\n    };\n    return <div className=\"notification\" style={style}>{msg}</div>\n};\n\nconst App = () => {\n    const [persons, setPersons] = useState([]);\n    const [filter, setFilter] = useState('');\n    const [notification, setNotification] = useState(null);\n    const [notificationIsError, setNotificationIsError] = useState(false);\n    const [notificationTimeout, setNotificationTimeout] = useState(null);\n\n    const refreshPersons = () => {\n        personService.getAll().then(setPersons);\n    };\n\n    useEffect(refreshPersons, []);\n\n    const notify = (msg, isError = false) => {\n        setNotification(msg);\n        setNotificationIsError(isError);\n\n        // cancel previous timeout so that we don't wipe\n        // this notification early...\n        clearTimeout(notificationTimeout);\n        setNotificationTimeout(setTimeout(() => {\n            setNotification(null);\n        }, 5000));\n    }\n\n    return (\n        <div>\n            <h2>Phonebook</h2>\n            <Notification msg={notification} isError={notificationIsError} />\n\n            <Filter filter={filter} setFilter={setFilter} />\n\n            <h3>add a new</h3>\n            <PersonForm\n                persons={persons}\n                refreshPersons={refreshPersons}\n                notify={notify} />\n\n            <h3>Numbers</h3>\n            <Persons\n                persons={persons}\n                filter={filter}\n                refreshPersons={refreshPersons}\n                notify={notify} />\n        </div>\n    )\n}\n\nexport default App","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}